#version 330 core

uniform vec3 lightDirectional;
uniform vec3 cameraPosition;
uniform sampler2D u_texture;
uniform sampler2D u_specularMap;
uniform sampler2D u_normalMap;
uniform sampler2D u_shadowTexture;

in vec2 UV;
in vec3 normal;
in vec3 fragVertex;
in vec3 lightVertex;
in mat3 TBN;

// Ouput data
out vec4 color;

void main()
{
    float specularStrength = 1.0f;
    float ambient = 0.01f;

    vec3 l_normal = texture(u_normalMap, UV).rgb;
    l_normal = normalize(l_normal * 2.0 - 1.0);
    l_normal = normalize(TBN * l_normal);

    vec3 cameraDirection = normalize(cameraPosition - fragVertex);
	vec3 reflectDirection = reflect(lightDirectional, l_normal);

    float spec = pow(max(dot(cameraDirection, reflectDirection), 0.0), texture(u_specularMap, UV).r*255);

	float diffuse = dot(l_normal, lightDirectional);
	float specular = specularStrength * spec;

    // Calculate shadow
    vec3 lightVertexNormalized = (lightVertex + vec3( 1, 1, 1)) / 2.0;
    vec3 fragVertexAux = (fragVertex + vec3( 1, 1, 1)) / 2.0;
    float shadow = 0.0f;
    if(texture(u_shadowTexture, lightVertexNormalized.xy).r < lightVertexNormalized.z ){
        shadow = 1.0f;
    }
    color =  vec4(texture(u_shadowTexture, fragVertex.xy).r, texture(u_shadowTexture, fragVertex.xy).g, texture(u_shadowTexture, fragVertex.xy).b,1);
    //color =  (ambient + (1.0 - shadow)*(diffuse + specular)) * texture(u_texture,UV);
}