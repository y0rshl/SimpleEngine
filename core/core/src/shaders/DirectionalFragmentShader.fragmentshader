#version 330 core

uniform vec4 outColor;
//Representa una direccion, el ultimo elemento del vector es 0
uniform vec4 dirLight;
uniform vec4 positionCam;

uniform sampler2D u_texture;
uniform sampler2D u_mapSpecular;
//uniform sampler2D u_mapNormal;
uniform sampler2D u_textureShadow;

in vec2 UV;
in vec4 normalW; //Normal en coordenadas mundo
in vec4 fragPosition; //posicion del fragmento en coordenadas mundo (llega del vertex shader)
in vec4 lightPosition; //posicion del fragmento en coordenadas luz (llega del vertex shader)
in mat3 TBN;

// Ouput data
out vec4 color;

void main()
{

    float amb = 0.01f;

	//----Calculo de la difusa
	vec4 dirL = -1 * dirLight; //queremos la maxima iluminancia
	float diff = dot(normalize(normalW),normalize(dirL));

    //----Calculo de la especular
    float m_shi = 10.0f; //mas grande este valor mas brillante el objeto
    vec4 matColor = texture(u_texture,UV);
    vec4 dirCam = normalize(positionCam - fragPosition);
    vec4 r = -dirLight + 2 * dot(normalW,dirLight) * normalW;
    float spec = max(0.0,pow(dot(r,dirCam),(texture(u_mapSpecular, UV).r*32)));

    //-----Calculo del shadow
    //para que vaya entre 0 y 1
    vec4 lightNomalize = (lightPosition + vec4(1,1,1,1)) / 2.0;
    float closestDepth = texture(u_textureShadow, lightNomalize.xy).r;
    float currentDepth = lightNomalize.z;
    float shadow = currentDepth > closestDepth  ? 1.0 : 0.0;

    color = ((1.0 - shadow) * (diff + spec) + amb)* matColor; //Agrego el shadow
    //color = diff * matColor + spec;

}