#version 330 core

// uniform vec3 lightDirectional;
uniform vec3 lightPosition;
uniform vec3 cameraPosition;
uniform sampler2D u_texture;
uniform sampler2D u_specularMap;
uniform sampler2D u_normalMap;

in vec2 UV;
// Normal de la superficice
in vec3 normal;
in vec3 fragVertex;

// Ouput data
out vec4 color;

void main()
{
    float specularStrength = 1.0f;
    float ambient = 0.05f;
    vec3 cameraDirection = normalize(cameraPosition - fragVertex);
	vec3 lightDirectional = normalize(lightPosition - fragVertex);
	vec3 reflectDirection = reflect(-lightDirectional, normal);
	float spec = pow(max(dot(cameraDirection, reflectDirection), 0.0), texture(u_specularMap, UV).r*255);
	float specular = specularStrength * spec;
	float diffuse = dot(normal, lightDirectional);
	color = (ambient + specular + diffuse) * texture(u_texture,UV);
}